@page "/"
@using Car_Rental.Common.Interfaces
@using Car_Rental.Common.Enums
@using Car_Rental.Common.Classes
@using Car_Rental.Common.Utilities
@using System.Text.Json;
@using Car_Rental.Business.Classes
@using System.Text.RegularExpressions


@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject Car_Rental.Business.Classes.BookingProcessor bp

<h1>Welcome to Car Rental</h1>
<div class="container">
    @if (!string.IsNullOrEmpty(bp.DataManagement.GetErrorMessage()))
    {
        <div class="position-fixed top-2 start-50 translate-middle-x">
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @bp.DataManagement.GetErrorMessage()
                <button type="button" class="btn-close" data-dismiss="alert" aria-label="Close" @onclick="bp.DataManagement.ClearErrorMessage"></button>
            </div>
        </div>
    }

</div>

<h2>Add vehicle</h2>
<AddVehicle />
<h2>Vehicles</h2>
<VehiclesTable />

@* <table class="table compact-table">
    <thead>
        <tr>
            <th>Registration Number</th>
            <th>Make and model</th>
            <th>Vehicle Type</th>
            <th>Odometer Position</th>
            <th>Cost Per Kilometer</th>
            <th>Daily Rate</th>
            <th>Action</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        <!-- Existing vehicles -->
        @if (bp.DataManagement.Vehicles != null)
        {
            @foreach (var vehicle in bp.DataManagement.Vehicles)
            {
                <tr>
                <td>@vehicle.RegistrationNumber</td>
                <td>@vehicle.Make</td>
                <td>
                    @switch (vehicle.VehicleType)
                    {
                        case VehicleType.Sedan:
                            if (vehicle is Sedan sedan)
                            {
                                <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                                <strong>Top speed:</strong> @sedan.TopSpeed km/h<br>">
                                @vehicle.VehicleType
                                </button>
                            }
                            break;
                        case VehicleType.StationWagon:
                            if (vehicle is StationWagon stationWagon)
                            {
                                <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                                <strong>Number of seats:</strong> @stationWagon.NumberOfSeats<br>">
                                @vehicle.VehicleType
                                </button>
                            }
                            break;
                        case VehicleType.Van:
                            if (vehicle is Van van)
                            {
                                <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                                <strong>Cargo capacity:</strong> @van.CargoCapacityCubicMeters m3<br>">
                                @vehicle.VehicleType
                                </button>
                            }
                            break;
                        case VehicleType.Motorcycle:
                            if (vehicle is Motorcycle motorcycle)
                            {
                            <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                            <strong>Engine size:</strong> @motorcycle.EngineSizeCC CCs.<br>">
                            @vehicle.VehicleType
                            </button>
                        }
                        break;
                    }
                </td>
                <td>@vehicle.OdometerPosition</td>
                <td>@vehicle.CostPerKilometer.FormatAsCurrency() / km</td>
                <td>@vehicle.DailyRate.FormatAsCurrency() / day</td>
                <td>
                    @if (bp.IsRentingMap.TryGetValue(vehicle.RegistrationNumber, out bool value) && value)
                    {
                        <input type="text" @bind="bp.DistanceMap[vehicle.LastBookingId]" placeholder="Kilometers driven" />
                        <button class="btn btn-primary" @onclick="() => bp.ReturnVehicle(vehicle)">Return</button>
                        
                    }
                    else
                    {
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="customerDropdown-@vehicle.RegistrationNumber" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @(bp.newBookingsMap.TryGetValue(vehicle, out var associatedPerson) ? $"{associatedPerson.FirstName} {associatedPerson.LastName}" : "Select person")
                            </button>

                            <div class="dropdown-menu" aria-labelledby="customerDropdown-@vehicle.RegistrationNumber">
                                @foreach (var person in bp.DataManagement.Customers)
                                {
                                    <button class="dropdown-item" @onclick="() => bp.SelectPerson(vehicle, person)">@person.FirstName @person.LastName</button>
                                }
                                <button class="dropdown-item" @onclick="() => bp.SelectPerson(vehicle, bp.DefaultPerson)"> - </button>
                            </div>
                                <button class="btn btn-outline-secondary" @onclick="() => bp.CreateNewBooking(vehicle)">Rent</button>
                        </div>
                            
                    }
                </td>
                    <td><span class="badge @(vehicle.BookingStatus == BookingStatuses.Available ? "text-bg-success" : "text-bg-danger")">@vehicle.BookingStatus</span></td>
            </tr>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </tbody>
</table> *@

<h2>Bookings</h2>
<BookingsTable />
@* <table class="table compact-table">
    <thead>
        <tr>
            <th>Vehicle</th>
            <th>Customer Name</th>
            <th>Odometer Start</th>
            <th>Odometer End</th>
            <th>Rented</th>
            <th>Returned</th>
            <th>Total Cost</th>
            <th>Booking Status</th>
        </tr>
    </thead>
    <tbody>
        @if (bp.DataManagement.Bookings != null)
        {
            @foreach (var booking in bp.DataManagement.Bookings.OrderByDescending(booking => booking.StartDate))
            {
                <tr>
                    <td>
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                            <strong>@booking.Vehicle.Make</strong>, @booking.Vehicle.VehicleType<br>
                            <strong>Cost per km:</strong> @booking.Vehicle.CostPerKilometer.FormatAsCurrency()<br>
                            <strong>Daily rate:</strong> @booking.Vehicle.DailyRate.FormatAsCurrency()
                        ">
                            @booking.Vehicle.RegistrationNumber
                        </button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Customer Information" data-bs-placement="bottom" data-bs-content="
                            <strong>First name:</strong> @booking.Customer.FirstName<br>
                            <strong>Last name:</strong> @booking.Customer.LastName<br>
                            <strong>Age:</strong> @booking.Customer.SocialSecurityNumber.GetAgeFromSsn()<br>
                            <strong>Personal Identity Number:</strong> @booking.Customer.SocialSecurityNumber
                        ">
                            @booking.Customer.FirstName @booking.Customer.LastName
                        </button>
                    </td>
                    <td>@booking.OdometerStart</td>
                    <td>@booking.OdometerEnd</td>
                    <td>@booking.StartDate.ToString("yyyy-MM-dd HH:mm")</td>

                    <td>@(booking.EndDate != DateTime.MinValue ? @booking.EndDate.ToString("yyyy-MM-dd HH:mm") : "")</td>
                    <td>
                        @if (booking.EndDate != DateTime.MinValue)
                        {
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Price breakdown" data-bs-placement="bottom" data-bs-content="
                            <strong>Kilometer cost for @booking.TotalKilometers km</strong><br>
                            @booking.TotalKilometerCost.FormatAsCurrency()<br>
                            <strong>Daily cost for @booking.RentalDays days</strong><br>
                            @booking.TotalDailyCost.FormatAsCurrency()
                        ">
                            @booking.TotalCost.FormatAsCurrency()
                        </button>
                        }
                    </td>
                    <td><span class="badge @(booking.BookingStatus == BookingStatuses.Closed ? "text-bg-secondary" : "text-bg-primary")">@booking.BookingStatus</span></td>
                </tr>
            }
        }
        else
        {
            <p>Loading...</p>
        }

    </tbody>
</table> *@


@* <button type="button" class="btn btn-lg btn-danger" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Popover title" data-bs-placement="bottom" data-bs-content="And here's some amazing content. It's very engaging. Right?">Click to toggle popover</button>
<button @onclick="ReinitializePopovers">Reinitialize Popovers</button> *@
<style>
    .compact-table {
        width: auto;
    }

        .compact-table th,
        .compact-table td {
            max-width: none;
        }
</style>
<h2>Customers</h2>
<table class="table compact-table">
    <thead>
        <tr>
            <th>Personal Identity Number</th>
            <th>Last Name</th>
            <th>First Name</th>
            <th></th> <!-- Add an empty column for the "Add" button -->
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <input @bind="bp.AddCustomer.Ssn" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddCustomer.ValidSsn, ValidationType.SSN, bp.DataManagement.ValidateAggressivelyDict[2]))"
                       placeholder="Personal identity number" 
                pattern="^[0-9-]*$" 
                maxlength="13" />
            </td>
            <td>
                <input @bind="bp.AddCustomer.NewCustomer.LastName" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddCustomer.NewCustomer.LastName, ValidationType.String, bp.DataManagement.ValidateAggressivelyDict[2]))"
                       placeholder="Last Name" />
            </td>
            <td>
                <input @bind="bp.AddCustomer.NewCustomer.FirstName" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddCustomer.NewCustomer.FirstName, ValidationType.String, bp.DataManagement.ValidateAggressivelyDict[2]))"
                       placeholder="First Name" />
            </td>
            <td>
                <button class="btn btn-outline-secondary"
                @onclick="() => bp.AddCustomer.CreateNewCustomer(2)">
                Add
                </button>
            </td>
        </tr>
        @if (bp.DataManagement.Customers != null)
        {
            @foreach (var customer in bp.DataManagement.Customers)
            {
                <tr>
                    <td>@customer.SocialSecurityNumber</td>
                    <td>@customer.LastName</td>
                    <td>@customer.FirstName</td>
                    <td></td> <!-- Empty column for alignment -->
                </tr>
            }
        }
    </tbody>
</table>
<button class="btn btn-outline-secondary" @onclick="() => bp.RefreshData()">Refresh datta</button>
<script>
    new bootstrap.Popover(document.body, {
        selector: '[data-bs-toggle="popover"]',
        container: 'body',
        html: true
    });
</script> 
@code {
    protected override async Task OnInitializedAsync()
    {
        await bp.InitializeAsync();
        bp.DataManagement.DataChanged += HandleDataChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("reinitializePopovers");
    }
    private void HandleDataChanged()
    {
        StateHasChanged();
    }
} 