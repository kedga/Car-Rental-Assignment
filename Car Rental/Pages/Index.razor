@page "/"
@using Car_Rental.Common.Interfaces
@using Car_Rental.Common.Enums
@using Car_Rental.Common.Classes
@using Car_Rental.Common.Utilities
@using System.Text.Json;
@using Car_Rental.Business.Classes
@using System.Text.RegularExpressions


@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject Car_Rental.Business.Classes.BookingProcessor bp

<div style="display: inline-block;">
    <div class="container">
        
        @if (!string.IsNullOrEmpty(bp.DataManagement.GetErrorMessage()))
        {
            <div class="position-fixed top-2 start-50 translate-middle-x">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @bp.DataManagement.GetErrorMessage()
                    <button type="button" class="btn-close" data-dismiss="alert" aria-label="Close" @onclick="bp.DataManagement.ClearErrorMessage"></button>
                </div>
            </div>
        }
    </div>

<h1>Car Rental Assignment</h1>
<div class="mb-5"></div>
<h4>Vehicles</h4>
<Vehicles />
<div class="mb-5"></div>
<h4>Bookings</h4>
<Bookings />
<div class="mb-5"></div>
<h4>Customers</h4>
<Customers />
<div class="mb-5"></div>

</div>

<script>
    new bootstrap.Popover(document.body, {
        selector: '[data-bs-toggle="popover"]',
        container: 'body',
        html: true
    });
</script> 

@code {
    protected override async Task OnInitializedAsync()
    {
        await bp.InitializeAsync();
        bp.DataManagement.DataChanged += HandleDataChanged;
        // await JSRuntime.InvokeVoidAsync("DataTablesAdd", "#vehicleTable", new int[] { 6, 7 });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("reinitializePopovers");
    }
    private void HandleDataChanged()
    {
        StateHasChanged();
    }
}