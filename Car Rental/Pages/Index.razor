@page "/"
@using Car_Rental.Common.Interfaces
@using Car_Rental.Common.Enums
@using Car_Rental.Common.Classes
@using System.Text.Json;
@using Car_Rental.Business.Classes;
@using System.Text.RegularExpressions;


@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject Car_Rental.Business.Classes.BookingProcessor BookingProcessor

<h1>Welcome to Car Rental</h1>
<div class="container">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" data-dismiss="alert" aria-label="Close" @onclick="ClearErrorMessage">
            
            </button>
        </div>

    }
</div>

<h2>Vehicles</h2>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Vehicle</th>
            <th>Make and model</th>
            <th>Odometer Position</th>
            <th>Cost Per Kilometer</th>
            <th>Vehicle Type</th>
            <th>Daily Rate</th>
            <th>Rental Status</th>
        </tr>
    </thead>
    <tbody>
        <!-- Input row for adding a new vehicle -->
        <tr>
            <td><input @bind="newVehicle.RegistrationNumber" class="form-control" placeholder="Registration Number" /></td>
            <td><input @bind="newVehicle.Make" class="form-control" placeholder="Make and Model" /></td>
            <td><input @bind="OdometerPositionNullable" class="form-control" placeholder="Odometer Position" type="number" /></td>
            <td><input @bind="CostPerKilometerNullable" class="form-control" placeholder="Cost Per Kilometer" type="number" /></td>
            <td>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="vehicleTypeDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @newVehicle.VehicleType
                    </button>
                    <div class="dropdown-menu" aria-labelledby="vehicleTypeDropdown">
                        @foreach (var vehicleType in Enum.GetValues(typeof(VehicleType)))
                        {
                            <button class="dropdown-item" @onclick="() => SelectVehicleType((VehicleType)vehicleType)">@vehicleType</button>
                        }
                    </div>
                </div>


            </td>
            <td><input @bind="DailyRateNullable" class="form-control" placeholder="Daily Rate" type="number" /></td>
            <td><input @bind="newVehicle.BookingStatus" class="form-control" placeholder="Booking Status" /></td>
            <td><button class="btn btn-success" @onclick="AddNewVehicle">Add</button></td>
        </tr>


        <!-- Existing vehicles -->
        @if (Vehicles != null)
        {
            @foreach (var vehicle in Vehicles)
            {
                <tr>
                <td>@vehicle.RegistrationNumber</td>
                <td>@vehicle.Make</td>
                <td>@vehicle.OdometerPosition</td>
                <td>@vehicle.CostPerKilometer</td>
                <td>@vehicle.VehicleType</td>
                <td>@vehicle.DailyRate</td>
                <td>@vehicle.BookingStatus</td>
            </tr>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </tbody>
</table>

<h2>Bookings</h2>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Vehicle</th>
            <th>Customer Name</th>
            <th>Odometer Start</th>
            <th>Odometer End</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Total Cost</th>
            <th>Booking Status</th>
        </tr>
    </thead>
    <tbody>
        @if (Bookings != null)
        {
            @foreach (var booking in Bookings)
            {
                <tr>
                    <td>
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                            <strong>@booking.Vehicle.Make</strong>, @booking.Vehicle.VehicleType<br>
                            <strong>Cost per km:</strong> @FormatAsCurrency(@booking.Vehicle.CostPerKilometer)<br>
                            <strong>Daily rate:</strong> @FormatAsCurrency(@booking.Vehicle.DailyRate)">
                            @booking.Vehicle.RegistrationNumber
                        </button>
                    </td>
                    <td>@booking.CustomerName</td>
                    <td>@booking.OdometerStart</td>
                    <td>@booking.OdometerEnd</td>
                    <td>@booking.StartDate</td>
                    <td>@booking.EndDate</td>
                    <td>
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Price breakdown" data-bs-placement="bottom" data-bs-content="
                            <strong>Total km cost for @booking.TotalKilometers km</strong><br>
                            @FormatAsCurrency(@booking.TotalKilometerCost)<br>
                            <strong>Total daily cost for @booking.RentalDays days</strong><br>
                            @FormatAsCurrency(@booking.TotalDailyCost)">
                            @FormatAsCurrency(@booking.TotalCost)
                        </button>
                    </td>
                    <td>@booking.BookingStatus</td>
                </tr>
            }
        }
        else
        {
            <p>Loading...</p>
        }

    </tbody>
</table>


@* <button type="button" class="btn btn-lg btn-danger" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Popover title" data-bs-placement="bottom" data-bs-content="And here's some amazing content. It's very engaging. Right?">Click to toggle popover</button>
<button @onclick="ReinitializePopovers">Reinitialize Popovers</button> *@

<h2>Customers</h2>
<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Personal Identity Number</th>
            <th>Last Name</th>
            <th>First Name</th>
            <th></th> <!-- Add an empty column for the "Add" button -->
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><input @bind="ssn" @bind:event="oninput" @bind:after="FormatSsn" class="form-control" placeholder="Personal identity number" pattern="^[0-9-]*$" maxlength="13" /></td>
            <td><input @bind="newCustomer.LastName" class="form-control" placeholder="Last Name" /></td>
            <td><input @bind="newCustomer.FirstName" class="form-control" placeholder="First Name" /></td>
            <td><button class="btn btn-success" @onclick="AddNewCustomer">Add</button></td>
        </tr>
        @if (Customers != null)
        {
            @foreach (var customer in Customers)
            {
                <tr>
                    <td>@customer.SocialSecurityNumber</td>
                    <td>@customer.LastName</td>
                    <td>@customer.FirstName</td>
                    <td></td> <!-- Empty column for alignment -->
                </tr>
            }
        }
    </tbody>
</table>


<div id="popoverContent" style="display: none;">
    <table class="table table-bordered">
        <tr>
            <th>Attribute</th>
            <th>Value</th>
        </tr>
        <tr>
            <td>Vehicle Make</td>
        </tr>
        <tr>
            <td>Registration Number</td>
        </tr>
        <tr>
            <td>Cost Per Kilometer</td>
        </tr>
        <!-- Add more rows for other attributes -->
    </table>
</div>
<script>
    new bootstrap.Popover(document.body, {
        selector: '[data-bs-toggle="popover"]',
        container: 'body'
        html: true,
    });

</script>
@code {
    IVehicle newVehicle = new Vehicle("", "");
    IPerson newCustomer = new Person("","","");
    double? OdometerPositionNullable;
    double? CostPerKilometerNullable;
    double? DailyRateNullable;
    string ssn;
    bool validSsn = false;
    private VehicleType selectedVehicleType;
    string errorMessage = "errormessage is unchanged";
    // private IEnumerable<IBooking> Bookings { get; set; }
    // private IEnumerable<IPerson> Customers { get; set; }
    // private IEnumerable<IVehicle> Vehicles { get; set; }
    List<IBooking> Bookings = new List<IBooking>();
    List<IPerson> Customers = new List<IPerson>();
    List<IVehicle> Vehicles = new List<IVehicle>();
    string[] dataToLoad = { "vehicles", "people", "bookings" };
    protected override async Task OnInitializedAsync()
    {
        await BookingProcessor.InitializeDataAsync();
        RefreshDataDisplayed();
        errorMessage = BookingProcessor._dataService.GetErrorMessage();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("reinitializePopovers");
    }
    private void RefreshDataDisplayed()
    {
        Bookings = BookingProcessor.GetDataObjectsOfType<IBooking>().ToList();
        Customers = BookingProcessor.GetDataObjectsOfType<IPerson>().ToList();
        Vehicles = BookingProcessor.GetDataObjectsOfType<IVehicle>().ToList();
    }
    private void SelectVehicleType(VehicleType vehicleType)
    {
        selectedVehicleType = vehicleType;
        newVehicle.VehicleType = vehicleType;
    }

    private void AddNewVehicle()
    {
        if (string.IsNullOrWhiteSpace(newVehicle.RegistrationNumber) ||
            string.IsNullOrWhiteSpace(newVehicle.Make) ||
            OdometerPositionNullable < 0 ||
            CostPerKilometerNullable <= 0 ||
            DailyRateNullable <= 0)
        {
            errorMessage = "Please fill in all required fields and ensure numeric values are positive.";
        }
        else
        {
            newVehicle.CostPerKilometer = CostPerKilometerNullable ?? 0.0;
            newVehicle.DailyRate = DailyRateNullable ?? 0.0;
            newVehicle.OdometerPosition = OdometerPositionNullable ?? 0.0;
            BookingProcessor.AddDataObject(newVehicle);
            RefreshDataDisplayed();
            newVehicle = new Vehicle("", "");
            OdometerPositionNullable = CostPerKilometerNullable = DailyRateNullable = null;
            errorMessage = BookingProcessor._dataService.GetErrorMessage();
        }
    }
    private void AddNewCustomer()
    {
        if (string.IsNullOrWhiteSpace(newCustomer.LastName) ||
            string.IsNullOrWhiteSpace(newCustomer.FirstName))
        {
            errorMessage = "Please fill in all required fields.";
        }
        // else if (!IsSwedishSsnValid(newCustomer.SocialSecurityNumber, out string formattedSsn))
        // {
        //     errorMessage = "Please enter a valid Swedish Personal Identity Number in 10 digit format.";
        // }
        else
        {
            newCustomer.SocialSecurityNumber = ssn;
            BookingProcessor.AddDataObject(newCustomer);
            RefreshDataDisplayed();
            newCustomer = new Person("", "", "");
            errorMessage = BookingProcessor._dataService.GetErrorMessage();
        }
    }
    private void FormatSsn()
    {
        bool matching = false;
        if (Regex.IsMatch(ssn, @"^(0[1-9]|[1-9][0-9])(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])(-?[0-9]{4})$"))
        {
            matching = true;
            int currentYear = DateTime.Now.Year % 100;
            int.TryParse(ssn.Substring(0, 2), out int ssnYear);
            if (ssnYear > currentYear)
                ssn = "19" + ssn;
            else
                ssn = "20" + ssn;
        }
        else if (Regex.IsMatch(ssn, @"^(19|20)(0[1-9]|[1-9][0-9])(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])(-?[0-9]{4})$"))
        {
            matching = true;
            validSsn = true;
        }
        else 
            matching = false;
        if (matching == true && ssn.Length == 12)
        {
            ssn = ssn.Insert(8, "-");
            validSsn = true;
        }
    }

    private void ClearErrorMessage()
    {
        errorMessage = "";
    }


    public string FormatAsCurrency(double amount) => string.Format("${0:N2}", amount);
}