@page "/"
@using Car_Rental.Common.Interfaces
@using Car_Rental.Common.Enums
@using Car_Rental.Common.Classes
@using Car_Rental.Common.Utilities
@using System.Text.Json;
@using Car_Rental.Business.Classes;
@using System.Text.RegularExpressions;


@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject Car_Rental.Business.Classes.BookingProcessor bp

<h1>Welcome to Car Rental</h1>
<div class="container">
    @if (!string.IsNullOrEmpty(bp.DataAccess.errorMessage))
    {
        <div class="position-fixed top-2 start-50 translate-middle-x">
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @bp.DataAccess.errorMessage
                <button type="button" class="btn-close" data-dismiss="alert" aria-label="Close" @onclick="bp.DataAccess.ClearErrorMessage"></button>
            </div>
        </div>
    }

</div>

<h2>Vehicles</h2>
<table class="table compact-table">
    <thead>
        <tr>
            <th>Registration Number</th>
            <th>Make and model</th>
            <th>Vehicle Type</th>
            <th>Odometer Position</th>
            <th>Cost Per Kilometer</th>
            <th>Daily Rate</th>
            <th>Rental Status</th>
        </tr>
    </thead>
    <tbody>
        <!-- Input row for adding a new vehicle -->
        <tr>
            <td>
                <input @bind="bp.DataAccess.NewVehicle.RegistrationNumber" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.NewVehicle.RegistrationNumber, "string", 1))"
                       placeholder="Registration Number" />
            </td>
            <td>
                <input @bind="bp.DataAccess.NewVehicle.Make" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.NewVehicle.Make, "string", 1))"
                       placeholder="Make and Model" />
            </td>
            <td>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="vehicleTypeDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @bp.DataAccess.NewVehicle.VehicleType
                    </button>
                    <div class="dropdown-menu" aria-labelledby="vehicleTypeDropdown">
                        @foreach (var vehicleType in Enum.GetValues(typeof(VehicleType)))
                        {
                            <button class="dropdown-item" @onclick="() => bp.DataAccess.SelectVehicleType((VehicleType)vehicleType)">@vehicleType</button>
                        }
                    </div>
                </div>
            </td>
            <td>
                <input @bind="bp.DataAccess.OdometerPositionNullable" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.OdometerPositionNullable, "number", 1))"
                       placeholder="Odometer Position"
                type="number" />
            </td>
            <td>
                <input @bind="bp.DataAccess.CostPerKilometerNullable" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.CostPerKilometerNullable, "number", 1))"
                       placeholder="Cost Per Kilometer"
                type="number" />
            </td>
            <td>
                <input @bind="bp.DataAccess.DailyRateNullable" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.DailyRateNullable, "number", 1))"
                       placeholder="Daily Rate" 
                type="number" />
            </td>
            <td><input @bind="bp.DataAccess.NewVehicle.BookingStatus" class="form-control" placeholder="Booking Status" /></td>
            <td><button class="btn btn-success" @onclick="(e) => bp.DataAccess.AddNewVehicle(1)">Add</button></td>
        </tr>


        <!-- Existing vehicles -->
        @if (bp.DataAccess.Vehicles != null)
        {
            @foreach (var vehicle in bp.DataAccess.Vehicles)
            {
                <tr>
                <td>@vehicle.RegistrationNumber</td>
                <td>@vehicle.Make</td>
                <td>@vehicle.VehicleType</td>
                <td>@vehicle.OdometerPosition</td>
                <td>@vehicle.CostPerKilometer.FormatAsCurrency() / km</td>
                <td>@vehicle.DailyRate.FormatAsCurrency() / day</td>
                <td>@vehicle.BookingStatus</td>
            </tr>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </tbody>
</table>

<h2>Bookings</h2>
<table class="table compact-table">
    <thead>
        <tr>
            <th>Vehicle</th>
            <th>Customer Name</th>
            <th>Odometer Start</th>
            <th>Odometer End</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Total Cost</th>
            <th>Booking Status</th>
        </tr>
    </thead>
    <tbody>
        @if (bp.DataAccess.Bookings != null)
        {
            @foreach (var booking in bp.DataAccess.Bookings)
            {
                <tr>
                    <td>
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                            <strong>@booking.Vehicle.Make</strong>, @booking.Vehicle.VehicleType<br>
                            <strong>Cost per km:</strong> @booking.Vehicle.CostPerKilometer.FormatAsCurrency()<br>
                            <strong>Daily rate:</strong> @booking.Vehicle.DailyRate.FormatAsCurrency()
                        ">
                            @booking.Vehicle.RegistrationNumber
                        </button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Customer Information" data-bs-placement="bottom" data-bs-content="
                            <strong>First name:</strong> @booking.Customer.FirstName<br>
                            <strong>Last name:</strong> @booking.Customer.LastName<br>
                            <strong>Age:</strong> @DateTimeUtils.GetAgeFromSsn(booking.Customer.SocialSecurityNumber)<br>
                            <strong>Personal Identity Number:</strong> @booking.Customer.SocialSecurityNumber
                        ">
                            @booking.Customer.FirstName @booking.Customer.LastName
                        </button>
                    </td>
                    <td>@booking.OdometerStart</td>
                    <td>@booking.OdometerEnd</td>
                    <td>@booking.StartDate</td>
                    <td>@booking.EndDate</td>
                    <td>
                        <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Price breakdown" data-bs-placement="bottom" data-bs-content="
                            <strong>Kilometer cost for @booking.TotalKilometers km</strong><br>
                            @booking.TotalKilometerCost.FormatAsCurrency()<br>
                            <strong>Daily cost for @booking.RentalDays days</strong><br>
                            @booking.TotalDailyCost.FormatAsCurrency()
                        ">
                            @booking.TotalCost.FormatAsCurrency()
                        </button>
                    </td>
                    <td>@booking.BookingStatus</td>
                </tr>
            }
        }
        else
        {
            <p>Loading...</p>
        }

    </tbody>
</table>


@* <button type="button" class="btn btn-lg btn-danger" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Popover title" data-bs-placement="bottom" data-bs-content="And here's some amazing content. It's very engaging. Right?">Click to toggle popover</button>
<button @onclick="ReinitializePopovers">Reinitialize Popovers</button> *@
<style>
    .compact-table {
        width: auto;
    }

        .compact-table th,
        .compact-table td {
            max-width: none;
        }
</style>
<h2>Customers</h2>
<table class="table compact-table">
    <thead>
        <tr>
            <th>Personal Identity Number</th>
            <th>Last Name</th>
            <th>First Name</th>
            <th></th> <!-- Add an empty column for the "Add" button -->
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <input @bind="bp.DataAccess.Ssn" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.ValidSsn, "ssn", 2))"
                       placeholder="Personal identity number" 
                pattern="^[0-9-]*$" 
                maxlength="13" />
            </td>
            <td>
                <input @bind="bp.DataAccess.NewCustomer.LastName" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.NewCustomer.LastName, "string", 2))"
                       placeholder="Last Name" />
            </td>
            <td>
                <input @bind="bp.DataAccess.NewCustomer.FirstName" @bind:event="oninput"
                       class="form-control @(bp.DataAccess.DataValidation.ValidateAndReturnCssClass(bp.DataAccess.NewCustomer.FirstName, "string", 2))"
                       placeholder="First Name" />
            </td>
            <td>
                <button class="btn btn-success" 
                @onclick="(e) => bp.DataAccess.AddNewCustomer(2)">
                Add
                </button>
            </td>
        </tr>
        @if (bp.DataAccess.Customers != null)
        {
            @foreach (var customer in bp.DataAccess.Customers)
            {
                <tr>
                    <td>@customer.SocialSecurityNumber</td>
                    <td>@customer.LastName</td>
                    <td>@customer.FirstName</td>
                    <td></td> <!-- Empty column for alignment -->
                </tr>
            }
        }
    </tbody>
</table>
<script>
    new bootstrap.Popover(document.body, {
        selector: '[data-bs-toggle="popover"]',
        container: 'body'
        html: true,
    });
</script> 
@code {
    protected override async Task OnInitializedAsync()
    {
        await bp.InitializeAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("reinitializePopovers");
    }
} 