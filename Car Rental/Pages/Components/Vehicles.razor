@inject Car_Rental.Business.Classes.BookingProcessor bp
@inject IJSRuntime JSRuntime
@implements IDisposable

<table class="table compact-table">
    <thead>
        <tr>
            <th><span class="sortable-header" @onclick='() => bp.VehicleSorter.SortVehicles("registrationnumber")'>Registration Number</span></th>
            <th><span class="sortable-header" @onclick='() => bp.VehicleSorter.SortVehicles("make")'>Make and model</span></th>
            <th style="min-width: 200px"><span class="sortable-header" @onclick='() => bp.VehicleSorter.SortVehicles("VehicleType")'>Vehicle Type</span></th>
            <th><span class="sortable-header" @onclick='() => bp.VehicleSorter.SortVehicles("OdometerPosition")'>Odometer Position</span></th>
            <th><span class="sortable-header" @onclick='() => bp.VehicleSorter.SortVehicles("costperkilometer")'>Cost Per Kilometer</span></th>
            <th><span class="sortable-header" @onclick='() => bp.VehicleSorter.SortVehicles("dailyrate")'>Daily Rate</span></th>
            <th>Action</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <input disabled="@bp.AddBooking.IsProcessing" @bind="bp.AddVehicle.PrototypeVehicle.RegistrationNumber" @bind:event="oninput"
                       class="form-control @bp.AddVehicle.PrototypeVehicle.RegistrationNumber.ValidateAndReturnCssClass(ValidationType.String, bp.ValidateAggressivelyDict[1])"
                       size="1"
                       placeholder="Reg No" />
            </td>
            <td>
                <input disabled="@bp.AddBooking.IsProcessing" @bind="bp.AddVehicle.PrototypeVehicle.Make" @bind:event="oninput"
                       class="form-control @bp.AddVehicle.PrototypeVehicle.Make.ValidateAndReturnCssClass(ValidationType.String, bp.ValidateAggressivelyDict[1])"
                       size="1"
                       placeholder="Make" />
            </td>
            <td>
                <div class="dropdown">
                    <button disabled="@bp.AddBooking.IsProcessing" class="btn dropdown-toggle @bp.AddVehicle.PrototypeVehicle.VehicleType.ValidateAndReturnCssClass(ValidationType.VehicleType, bp.ValidateAggressivelyDict[1], "btn-outline-success", "btn-outline-danger", "btn-outline-secondary")" type="button" id="vehicleTypeDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @bp.AddVehicle.PrototypeVehicle.VehicleType.DisplayName()
                    </button>
                    <div class="dropdown-menu" aria-labelledby="vehicleTypeDropdown">
                        @foreach (VehicleType vehicleType in Enum.GetValues(typeof(VehicleType)).Cast<VehicleType>().Skip(1))
                        {
                            <button disabled="@bp.AddBooking.IsProcessing" class="dropdown-item" @onclick="() => bp.AddVehicle.SelectVehicleType(vehicleType)">@vehicleType.DisplayName()</button>
                        }

                        <button disabled="@bp.AddBooking.IsProcessing" class="dropdown-item" @onclick="() => bp.AddVehicle.SelectVehicleType(VehicleType.None)"> - </button>
                    </div>
                </div>
            </td>
            <td>
                <input disabled="@bp.AddBooking.IsProcessing" @bind="bp.AddVehicle.OdometerPositionInput" @bind:event="oninput"
                       class="form-control @bp.AddVehicle.OdometerPositionInput.ValidateAndReturnCssClass(ValidationType.Int, bp.ValidateAggressivelyDict[1])"
                       size="1"
                       placeholder="Odometer" />
            </td>
            <td>
                <input disabled="@bp.AddBooking.IsProcessing" @bind="bp.AddVehicle.CostPerKilometerInput" @bind:event="oninput"
                       class="form-control @bp.AddVehicle.CostPerKilometerInput.ValidateAndReturnCssClass(ValidationType.Double, bp.ValidateAggressivelyDict[1])"
                       size="1"
                       placeholder="Cost/km" />
            </td>
            <td>
                <input disabled="@bp.AddBooking.IsProcessing" @bind="bp.AddVehicle.DailyRateInput" @bind:event="oninput"
                       class="form-control @bp.AddVehicle.DailyRateInput.ValidateAndReturnCssClass(ValidationType.Double, bp.ValidateAggressivelyDict[1])"
                       size="1"
                       placeholder="Rate" />
            </td>
            <td>
                <button disabled="@bp.AddBooking.IsProcessing" class="btn btn-outline-secondary" data-bs-toggle="@(
                        bp.AddVehicle.DataIsValid() && 
                        bp.AddVehicle.IsRegNoUnique() && 
                        bp.AddVehicle.PrototypeVehicle.VehicleType is not VehicleType.None ? 
                        "modal" : "")"
                        data-bs-target="#extraFeatureInput" @onclick="() => bp.AddVehicle.EnterCommonVehicleData(1)">
                    Add Vehicle
                </button>
            </td>
            @if (bp.AddBooking.IsProcessing)
            {
                <td><span class="badge text-bg-warning">Processing</span></td>
            }

        </tr>
        @if (bp.Vehicles != null)
        {
            @foreach (var vehicle in bp.VehicleSorter.SortedVehicles)
            {
                <tr>
                    <td>@vehicle.RegistrationNumber</td>
                    <td>@vehicle.Make</td>
                    <td>
                        <SpecificVehicleInfoPopover vehicle="vehicle" />
                    </td>
                    <td>@vehicle.OdometerPosition</td>
                    <td>@vehicle.CostPerKilometer.FormatAsCurrency() / km</td>
                    <td>@vehicle.DailyRate.FormatAsCurrency() / day</td>
                    <td>
                        @if (bp.AddBooking.IsVehicleCurrentlyRentedMap.TryGetValue(vehicle, out bool value) && value)
                        {
                            <div style="display: flex; align-items: center;">
                                <input disabled="@bp.AddBooking.IsProcessing" type="text" @bind="bp.AddBooking.DistanceMap[vehicle.LastBookingId]" placeholder="Kilometers driven" />
                                <button disabled="@bp.AddBooking.IsProcessing" class="btn btn-primary" style="margin-left: 5px;" @onclick="() => bp.AddBooking.ReturnVehicle(vehicle)">Return</button>
                            </div>
                        }
                        else
                        {
                            <div class="dropdown" style="display: flex; align-items: center;">
                                <button disabled="@bp.AddBooking.IsProcessing" class="btn btn-outline-secondary dropdown-toggle" type="button" id="customerDropdown-@vehicle.RegistrationNumber" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @(bp.AddBooking.VehicleToPersonBookingsMap.TryGetValue(vehicle, out var associatedPerson) ? $"{associatedPerson.FirstName} {associatedPerson.LastName}" : "Select person")
                                </button>

                                <div class="dropdown-menu" aria-labelledby="customerDropdown-@vehicle.RegistrationNumber">
                                    @foreach (var person in bp.Customers)
                                    {
                                        <button class="dropdown-item" @onclick="() => bp.AddBooking.SelectPerson(vehicle, person)">@person.FirstName @person.LastName</button>
                                    }
                                    <button class="dropdown-item" @onclick="() => bp.AddBooking.SelectPerson(vehicle, bp.AddBooking.DefaultPerson)"> - </button>
                                </div>
                                <button disabled="@bp.AddBooking.IsProcessing" class="btn btn-outline-secondary ms-2" @onclick="() => bp.AddBooking.CreateNewBooking(vehicle)">Rent</button>
                            </div>
                        }
                    </td>
                    <td><span class="badge @(vehicle.BookingStatus == BookingStatus.Available ? "text-bg-success" : "text-bg-danger")">@vehicle.BookingStatus</span></td>
                    <td>
                        <button class="btn btn-outline-secondary ms-2" @onclick="() => 
                            {
                                if (vehicle.BookingStatus == BookingStatus.Available) 
                                {
                                    bp.RemoveDataObject<IVehicle>(v => v.RegistrationNumber == vehicle.RegistrationNumber);
                                }
                            }">
                            Remove vehicle
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <text>Loading...</text>
        }
    </tbody>
</table>
<div class="modal fade" id="extraFeatureInput" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">
                    @switch (bp.AddVehicle.PrototypeVehicle.VehicleType)
                    {
                        case VehicleType.Sedan:
                            {
                                <text>Please enter Sedan top speed in km/h</text>
                                break;
                            }
                        case VehicleType.StationWagon:
                            {
                                <text>Please enter Station Wagon towing capavity in kg</text>
                                break;
                            }
                        case VehicleType.Van:
                            {
                                <text>Please enter Van cargo capacity in m³</text>
                                break;
                            }
                        case VehicleType.Motorcycle:
                            {
                                <text>Please enter Motorcycle engine size in cc</text>
                                break;
                            }
                    }
                </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @switch (bp.AddVehicle.PrototypeVehicle.VehicleType)
                {
                    case VehicleType.Sedan:
                        if (bp.AddVehicle.PrototypeVehicle is Sedan sedan)
                        {
                            <input @bind="sedan.TopSpeedInput" @bind:event="oninput"
                            class="form-control @sedan.TopSpeedInput.ValidateAndReturnCssClass(ValidationType.Int, bp.ValidateAggressivelyDict[1])"
                            placeholder="Top Speed km/h" />
                        }
                        break;
                    case VehicleType.StationWagon:
                        if (bp.AddVehicle.PrototypeVehicle is StationWagon stationWagon)
                        {
                            <input @bind="stationWagon.TowingCapacityInput" @bind:event="oninput"
                            class="form-control @stationWagon.TowingCapacityInput.ValidateAndReturnCssClass(ValidationType.Int, bp.ValidateAggressivelyDict[1])"
                            placeholder="Towing capacity in kg" />
                        }
                        break;
                    case VehicleType.Van:
                        if (bp.AddVehicle.PrototypeVehicle is Van van)
                        {
                            <input @bind="van.CargoCapacityInput" @bind:event="oninput"
                            class="form-control @van.CargoCapacityInput.ValidateAndReturnCssClass(ValidationType.Double, bp.ValidateAggressivelyDict[1])"
                            placeholder="Cargo capacity in m³" />
                        }
                        break;
                    case VehicleType.Motorcycle:
                        if (bp.AddVehicle.PrototypeVehicle is Motorcycle motorcycle)
                        {
                            <input @bind="motorcycle.EngineSizeCCInput" @bind:event="oninput"
                            class="form-control @motorcycle.EngineSizeCCInput.ValidateAndReturnCssClass(ValidationType.Int, bp.ValidateAggressivelyDict[1])"
                            placeholder="Engine size in cc" />
                        }
                        break;
                    default:
                        <text>Unrecognized vehicle class</text>
                        break;
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="() => bp.AddVehicle.EnterSpecificVehicleData(1)" data-bs-dismiss="modal">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        bp.DataChanged += HandleStateChanged;
    }
    private void HandleStateChanged()
    {
        StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        bp.DataChanged -= HandleStateChanged;
    }
}