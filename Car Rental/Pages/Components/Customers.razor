@inject Car_Rental.Business.Classes.BookingProcessor bp
@implements IDisposable

<table class="table compact-table">
    <thead>
        <tr>
            <th>Personal Identity Number</th>
            <th style="min-width:10em">Last Name</th>
            <th style="min-width:10em">First Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <input @bind="bp.AddCustomer.Ssn" @bind:event="oninput"
                       class="form-control @bp.AddCustomer.ValidSsn.ValidateAndReturnCssClass(ValidationType.SSN, bp.StateManagement.ValidateAggressivelyDict[2])"
                       placeholder="Identity Number"
                       maxlength="13"
                       size="1" />
            </td>
            <td>
                <input @bind="bp.AddCustomer.NewCustomer.FirstName" @bind:event="oninput"
                       class="form-control @bp.AddCustomer.NewCustomer.FirstName.ValidateAndReturnCssClass(ValidationType.String, bp.StateManagement.ValidateAggressivelyDict[2])"
                       placeholder="First Name"
                       size="1" />
            </td>
            <td>
                <input @bind="bp.AddCustomer.NewCustomer.LastName" @bind:event="oninput"
                       class="form-control @bp.AddCustomer.NewCustomer.LastName.ValidateAndReturnCssClass(ValidationType.String, bp.StateManagement.ValidateAggressivelyDict[2])"
                       placeholder="Last Name"
                       size="1" />
            </td>
            <td>
                <button class="btn btn-outline-secondary"
                @onclick="() => bp.AddCustomer.CreateNewCustomer(2)">
                    Add Customer
                </button>
            </td>
        </tr>
        @if (bp.StateManagement.Customers != null)
        {
            @foreach (var customer in bp.StateManagement.Customers)
            {
                <tr>
                    <td>@customer.SocialSecurityNumber</td>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td></td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        bp.StateManagement.DataChanged += HandleStateChanged;
    }

    private void HandleStateChanged()
    {
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        bp.StateManagement.DataChanged -= HandleStateChanged;
    }
}