@inject Car_Rental.Business.Classes.BookingProcessor bp
@implements IDisposable

<table class="table compact-table">
    <thead>
        <tr>
            <th>Registration Number</th>
            <th>Make and model</th>
            <th>Vehicle Type</th>
            <th>Odometer Position</th>
            <th>Cost Per Kilometer</th>
            <th>Daily Rate</th>
            <th>Action</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @if (bp.DataManagement.Vehicles != null)
        {
            Console.WriteLine($"length of bp.DataManagement.Vehicles: {bp.DataManagement.Vehicles.Count}");
            @foreach (var vehicle in bp.DataManagement.Vehicles)
            {
                Console.WriteLine($"vehicle: {vehicle}");
                <tr>
                    <td>@vehicle.RegistrationNumber</td>
                    <td>@vehicle.Make</td>
                    <td>
                        @switch (vehicle.VehicleType)
                        {
                            case VehicleType.Sedan:
                                if (vehicle is Sedan sedan)
                                {
                                    <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                                    <strong>Top speed:</strong> @sedan.TopSpeed km/h<br>">
                                        @vehicle.VehicleType.DisplayName()
                                                    </button>
                                }
                                break;
                            case VehicleType.StationWagon:
                                if (vehicle is StationWagon stationWagon)
                                {
                                    <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                                    <strong>Number of seats:</strong> @stationWagon.NumberOfSeats<br>">
                                        @vehicle.VehicleType.DisplayName()
                                                    </button>
                                }
                                break;
                            case VehicleType.Van:
                                if (vehicle is Van van)
                                {
                                    <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                                    <strong>Cargo capacity:</strong> @van.CargoCapacityCubicMeters m&sup3;<br>">
                                        @vehicle.VehicleType.DisplayName()
                                                    </button>
                                }
                                break;
                            case VehicleType.Motorcycle:
                                if (vehicle is Motorcycle motorcycle)
                                {
                                    <button type="button" class="btn btn-outline-info" data-bs-trigger="hover focus" data-bs-toggle="popover" data-bs-title="Vehicle Information" data-bs-placement="bottom" data-bs-content="
                                    <strong>Engine size:</strong> @motorcycle.EngineSizeCC cc<br>">
                                        @vehicle.VehicleType.DisplayName()
                                                </button>
                                }
                                break;
                        }
                    </td>
                    <td>@vehicle.OdometerPosition</td>
                    <td>@vehicle.CostPerKilometer.FormatAsCurrency() / km</td>
                    <td>@vehicle.DailyRate.FormatAsCurrency() / day</td>
                    <td>
                        @if (bp.IsRentingMap.TryGetValue(vehicle.RegistrationNumber, out bool value) && value)
                        {
                            <input type="text" @bind="bp.DistanceMap[vehicle.LastBookingId]" placeholder="Kilometers driven" />
                            <button class="btn btn-primary" @onclick="() => bp.ReturnVehicle(vehicle)">Return</button>

                        }
                        else
                        {
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="customerDropdown-@vehicle.RegistrationNumber" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    @(bp.newBookingsMap.TryGetValue(vehicle, out var associatedPerson) ? $"{associatedPerson.FirstName} {associatedPerson.LastName}" : "Select person")
                                </button>

                                <div class="dropdown-menu" aria-labelledby="customerDropdown-@vehicle.RegistrationNumber">
                                    @foreach (var person in bp.DataManagement.Customers)
                                    {
                                        <button class="dropdown-item" @onclick="() => bp.SelectPerson(vehicle, person)">@person.FirstName @person.LastName</button>
                                    }
                                    <button class="dropdown-item" @onclick="() => bp.SelectPerson(vehicle, bp.DefaultPerson)"> - </button>
                                </div>
                                <button class="btn btn-outline-secondary" @onclick="() => bp.CreateNewBooking(vehicle)">Rent</button>
                            </div>
                        }
                    </td>
                    <td><span class="badge @(vehicle.BookingStatus == BookingStatus.Available ? "text-bg-success" : "text-bg-danger")">@vehicle.BookingStatus</span></td>
                </tr>
            }
        }
        else
        {
            Console.WriteLine("ERROR ERROR SEND HELP");
            <text>Loading...</text>
        }
    </tbody>
</table>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        bp.DataManagement.DataChanged += HandleDataChanged;
    }

    private void HandleDataChanged()
    {
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        bp.DataManagement.DataChanged -= HandleDataChanged;
    }
}