@inject Car_Rental.Business.Classes.BookingProcessor bp

<table class="table compact-table">
    <thead>
        <tr>
            <th>Registration Number</th>
            <th>Make and model</th>
            <th>Vehicle Type</th>
            <th>Odometer Position</th>
            <th>Cost Per Kilometer</th>
            <th>Daily Rate</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <!-- Input row for adding a new vehicle -->
        <tr>
            <td>
                <input @bind="bp.AddVehicle.PrototypeVehicle.RegistrationNumber" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddVehicle.PrototypeVehicle.RegistrationNumber, ValidationType.String, bp.DataManagement.ValidateAggressivelyDict[1]))"
                       placeholder="Registration Number" />
            </td>
            <td>
                <input @bind="bp.AddVehicle.PrototypeVehicle.Make" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddVehicle.PrototypeVehicle.Make, ValidationType.String, bp.DataManagement.ValidateAggressivelyDict[1]))"
                       placeholder="Make and Model" />
            </td>
            <td>
                <div class="dropdown">
                    <button class="btn dropdown-toggle @(DataValidation.ValidateAndReturnCssClass(bp.AddVehicle.PrototypeVehicle.VehicleType, ValidationType.VehicleType, bp.DataManagement.ValidateAggressivelyDict[1], "btn-outline-success", "btn-outline-danger", "btn-outline-secondary"))" type="button" id="vehicleTypeDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @bp.AddVehicle.PrototypeVehicle.VehicleType.DisplayName()
                    </button>
                    <div class="dropdown-menu" aria-labelledby="vehicleTypeDropdown">
                        @foreach (VehicleType vehicleType in Enum.GetValues(typeof(VehicleType)).Cast<VehicleType>().Skip(1))
                        {
                            <button class="dropdown-item" @onclick="() => bp.AddVehicle.SelectVehicleType(vehicleType)">@vehicleType.DisplayName()</button>
                        }

                        <button class="dropdown-item" @onclick="() => bp.AddVehicle.SelectVehicleType(VehicleType.None)"> - </button>
                    </div>
                </div>
            </td>
            <td>
                <input @bind="bp.AddVehicle.OdometerPositionInput" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddVehicle.OdometerPositionInput, ValidationType.Int, bp.DataManagement.ValidateAggressivelyDict[1]))"
                       placeholder="Odometer Position" />
            </td>
            <td>
                <input @bind="bp.AddVehicle.CostPerKilometerInput" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddVehicle.CostPerKilometerInput, ValidationType.Double, bp.DataManagement.ValidateAggressivelyDict[1]))"
                       placeholder="Cost Per Kilometer" />
            </td>
            <td>
                <input @bind="bp.AddVehicle.DailyRateInput" @bind:event="oninput"
                       class="form-control @(DataValidation.ValidateAndReturnCssClass(bp.AddVehicle.DailyRateInput, ValidationType.Double, bp.DataManagement.ValidateAggressivelyDict[1]))"
                       placeholder="Daily Rate" />
            </td>
            <td><button class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="@(bp.AddVehicle.DataIsValid() && bp.AddVehicle.IsRegNoUnique() && bp.AddVehicle.PrototypeVehicle.VehicleType is not VehicleType.None ? "#extraFeatureInput" : "")" @onclick="() => bp.AddVehicle.EnterCommonVehicleData(1)">Add</button></td>
        </tr>
    </tbody>
</table>

<div class="modal fade" id="extraFeatureInput" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">
                    @switch (bp.AddVehicle.PrototypeVehicle.VehicleType)
                    {
                        case VehicleType.Sedan:
                            {
                                Console.WriteLine("VehicleType.Sedan");
                                <text>Please enter top speed in km/h</text>
                                break;
                            }
                        case VehicleType.StationWagon:
                            {
                                Console.WriteLine("VehicleType.StationWagon");
                                <text>Please enter number of seats</text>
                                break;
                            }
                        case VehicleType.Van:
                            {
                                Console.WriteLine("VehicleType.Van");
                                <text>Please enter cargo capacity in m³</text>
                                break;
                            }
                        case VehicleType.Motorcycle:
                            {
                                Console.WriteLine("VehicleType.Motorcycle");
                                <text>Please enter engine size in cc</text>
                                break;
                            }
                    }
                </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @switch (bp.AddVehicle.PrototypeVehicle.VehicleType)
                {
                    case VehicleType.Sedan:
                        if (bp.AddVehicle.PrototypeVehicle is Sedan sedan)
                        {
                            <input @bind="sedan.TopSpeed" @bind:event="oninput"
                                   class="form-control @(DataValidation.ValidateAndReturnCssClass(sedan.TopSpeed, ValidationType.Int, bp.DataManagement.ValidateAggressivelyDict[1]))"
                                   placeholder="Top Speed km/h" />
                        }
                        break;
                    case VehicleType.StationWagon:
                        if (bp.AddVehicle.PrototypeVehicle is StationWagon stationWagon)
                        {
                            <input @bind="stationWagon.NumberOfSeats" @bind:event="oninput"
                                   class="form-control @(DataValidation.ValidateAndReturnCssClass(stationWagon.NumberOfSeats, ValidationType.Int, bp.DataManagement.ValidateAggressivelyDict[1]))"
                                   placeholder="Number of seats" />
                        }
                        break;
                    case VehicleType.Van:
                        if (bp.AddVehicle.PrototypeVehicle is Van van)
                        {
                            <input @bind="van.CargoCapacityCubicMeters" @bind:event="oninput"
                                   class="form-control @(DataValidation.ValidateAndReturnCssClass(van.CargoCapacityCubicMeters, ValidationType.Double, bp.DataManagement.ValidateAggressivelyDict[1]))"
                                   placeholder="Cargo capacity in m³" />
                        }
                        break;
                    case VehicleType.Motorcycle:
                        if (bp.AddVehicle.PrototypeVehicle is Motorcycle motorcycle)
                        {
                            <input @bind="motorcycle.EngineSizeCC" @bind:event="oninput"
                                   class="form-control @(DataValidation.ValidateAndReturnCssClass(motorcycle.EngineSizeCC, ValidationType.Int, bp.DataManagement.ValidateAggressivelyDict[1]))"
                                   placeholder="Engine size in cc" />
                        }
                        break;
                    default:
                        <text>Unrecognized vehicle class</text>
                        break;
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="() => bp.AddVehicle.EnterSpecificVehicleData(1)" data-bs-dismiss="modal">Save</button>
            </div>
        </div>
    </div>
</div>
@code {

}
